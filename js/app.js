/* ===== Helpers ===== */
const FALLBACK_IMG = 'assets/og-image.png';
async function loadJSON(path){ const r = await fetch(path, { cache: 'no-store' }); if(!r.ok) throw new Error(`${path}: ${r.status}`); return r.json(); }
function pickImg(x){ return x.thumb_url || x.image_url || FALLBACK_IMG; }
function escapeHTML(str){ return (str ?? '').toString().replace(/&/g,'&amp;').replace(/</g,'&lt;').replace(/>/g,'&gt;').replace(/"/g,'&quot;').replace(/'/g,'&#39;'); }
function el(tag, props={}, children=[]){ const n=document.createElement(tag); for(const [k,v] of Object.entries(props)){ if(k==='class') n.className=v; else if(k==='dataset') Object.assign(n.dataset,v); else if(k==='style') Object.assign(n.style,v); else if(k.startsWith('on')&&typeof v==='function') n.addEventListener(k.slice(2),v); else if(v!==undefined&&v!==null) n.setAttribute(k,v);} (Array.isArray(children)?children:[children]).forEach(c=>{ if(c==null)return; if(c instanceof Node) n.appendChild(c); else n.appendChild(document.createTextNode(String(c)));}); return n; }
function tameUpscaling(scope=document){ const imgs=scope.querySelectorAll('.card .thumb'); imgs.forEach(img=>{ const apply=()=>{ try{ const slot=img.parentElement?.clientWidth||0; const nw=img.naturalWidth||0; if(nw&&slot&&nw<slot) img.classList.add('no-upscale'); }catch(e){} }; if(img.complete) apply(); else img.addEventListener('load',apply,{once:true}); }); }
function feedCardNode(item){ const article=el('article',{class:'card',style:'margin:1rem 0;'}); const wrap=el('div',{class:'thumb-wrap'}); const img=el('img',{class:'thumb',src:pickImg(item),alt:'',loading:'lazy',referrerpolicy:'no-referrer'}); img.onerror=()=>{img.onerror=null;img.src=FALLBACK_IMG;}; wrap.appendChild(img); const body=el('div',{style:'padding:1rem'}); body.appendChild(el('h3',{},escapeHTML(item.title))); const meta=el('div',{class:'meta'}); meta.appendChild(el('span',{class:'badge'},escapeHTML(item.source))); const dateStr=item.published?new Date(item.published).toLocaleDateString():''; meta.appendChild(document.createTextNode(' ')); meta.appendChild(el('span',{},dateStr)); body.appendChild(meta); if(item.summary){ body.appendChild(el('p',{},escapeHTML(item.summary))); } const cta=el('p',{style:'margin:.75rem 0 0'}); cta.appendChild(el('a',{class:'btn',href:item.url||'#',target:'_blank',rel:'noopener noreferrer'},'Read source')); body.appendChild(cta); article.appendChild(wrap); article.appendChild(body); return article; }
async function initFeeds(){ const feedsHolder=document.getElementById('feeds-list'); if(!feedsHolder) return; let data=[]; try{ data=await loadJSON('data/feeds.json'); }catch(e){ console.error('feeds.json', e); return; } const frag=document.createDocumentFragment(); data.slice(0,60).forEach(item=>frag.appendChild(feedCardNode(item))); feedsHolder.innerHTML=''; feedsHolder.appendChild(frag); tameUpscaling(feedsHolder); }
document.addEventListener('DOMContentLoaded',()=>{ initFeeds(); });